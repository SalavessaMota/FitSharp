@{
    ViewData["Title"] = "CombinedClassesCalendar";
}

@inject FitSharp.Data.IUserRepository _userRepository
@inject FitSharp.Helpers.IUserHelper _userHelper

@{
    bool hasRemainingTime = false;
    bool hasRemainingClasses = false;
    var customer = await _userRepository.GetCustomerByUserName(User.Identity.Name);
    hasRemainingTime = customer?.MembershipEndDate > DateTime.Now;
    hasRemainingClasses = customer?.ClassesRemaining > 0;
}


<link href="https://cdn.jsdelivr.net/npm/fullcalendar@6.1.15/index.global.min.css" rel="stylesheet" />

<div class="text-center transparent-card">
    <h1>Available Classes</h1>

    <!-- Legend -->
    <div class="d-flex justify-content-center mb-3">
        <div class="d-flex align-items-center mr-4">
            <div style="width: 20px; height: 20px; background-color: #B70D00; margin-right: 10px; border-radius: 3px;"></div>
            <span>Personal Classes</span>
        </div>
        <div class="d-flex align-items-center">
            <div style="width: 20px; height: 20px; background-color: #808080; margin-right: 10px; border-radius: 3px;"></div>
            <span>Group Classes</span>
        </div>
    </div>

    <div id="flashMessageContainer" class="alert d-none" role="alert"></div>

    <!-- Calendar -->
    <div id="calendar" class="mb-3" style="overflow: auto; background-color: white;"></div>

    <div class="text-center">
        <a href="~/Home/index" class="btn btn-primary btn-lg mt-3 roundedwithshadow"><i class="fas fa-home"></i> Return Home</a>
    </div>
</div>

<!-- Modal for Personal Class Details -->
<div class="modal fade" id="personalClassModal" tabindex="-1" role="dialog" aria-labelledby="personalClassModalLabel" aria-hidden="true">
    <div class="modal-dialog" role="document">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title" id="personalClassModalLabel">Personal Class Details</h5>
                <button type="button" class="close" data-dismiss="modal" aria-label="Close" style="color: white;">
                    <span aria-hidden="true">&times;</span>
                </button>
            </div>
            <div class="modal-body">
                <p><strong>Class Type:</strong> <span id="personalClassType"></span></p>
                <p><strong>Gym:</strong> <span id="personalGym"></span></p>
                <p><strong>Instructor:</strong> <span id="personalInstructor"></span></p>
                <p><strong>Start Time:</strong> <span id="personalStartTime"></span></p>
                <p><strong>End Time:</strong> <span id="personalEndTime"></span></p>
                <p>
                    <strong>Instructor Score:</strong> <span id="personalInstructorScoreStars"></span>
                    <span class="text-muted" id="personalInstructorScoreText"></span>
                </p>
            </div>
            <div class="modal-footer">
                @if (User.Identity.IsAuthenticated)
                {
                    if (hasRemainingTime && hasRemainingClasses && this.User.IsInRole("Customer"))
                    {
                        <button type="button" id="personalEnrollButton" class="btn btn-primary">Enroll in Class</button>
                    }
                    else
                    {
                        <p class="text-logo-primary">
                            You need to have an active membership and remaining classes to enroll in classes.
                        </p>
                    }
                }
                else
                {
                    <a href="/Account/Login" class="btn btn-primary">Login to Enroll</a>
                    <a href="/Account/Register" class="btn btn-secondary">Register</a>
                }
                <button type="button" class="btn btn-secondary" data-dismiss="modal">Close</button>
            </div>
        </div>
    </div>
</div>


<!-- Modal for Group Class Details -->
<div class="modal fade" id="groupClassModal" tabindex="-1" role="dialog" aria-labelledby="groupClassModalLabel" aria-hidden="true">
    <div class="modal-dialog" role="document">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title" id="groupClassModalLabel">Group Class Details</h5>
                <button type="button" class="close" data-dismiss="modal" aria-label="Close" style="color: white;">
                    <span aria-hidden="true">&times;</span>
                </button>
            </div>
            <div class="modal-body">
                <p><strong>Class Type:</strong> <span id="groupClassType"></span></p>
                <p><strong>Gym:</strong> <span id="groupGym"></span></p>
                <p><strong>Instructor:</strong> <span id="groupInstructor"></span></p>
                <p><strong>Start Time:</strong> <span id="groupStartTime"></span></p>
                <p><strong>End Time:</strong> <span id="groupEndTime"></span></p>
                <p>
                    <strong>Instructor Score:</strong>
                    <span id="groupInstructorScoreStars"></span>
                    <span class="text-muted" id="groupInstructorScoreText"></span>
                </p>
            </div>
            <div class="modal-footer">
                @if (User.Identity.IsAuthenticated)
                {
                    if (hasRemainingTime && hasRemainingClasses)
                    {
                        <button type="button" id="groupEnrollButton" class="btn btn-primary">Enroll in Class</button>
                    }
                    else
                    {
                        <p class="text-logo-primary">
                            You need to have an active membership and remaining classes to enroll in classes.
                        </p>
                    }
                }
                else
                {
                    <a href="/Account/Login" class="btn btn-primary">Login to Enroll</a>
                    <a href="/Account/Register" class="btn btn-secondary">Register</a>
                }
                <button type="button" class="btn btn-secondary" data-dismiss="modal">Close</button>
            </div>
        </div>
    </div>
</div>


@section Scripts {
    @* <script src="https://cdn.jsdelivr.net/npm/jquery@3.6.4/dist/jquery.min.js"></script>
    <script src="https://cdn.jsdelivr.net/npm/bootstrap@4.6.2/dist/js/bootstrap.bundle.min.js"></script> *@
    <script src="https://cdn.jsdelivr.net/npm/fullcalendar@6.1.15/index.global.min.js"></script>
    <script src="https://kit.fontawesome.com/a076d05399.js" crossorigin="anonymous"></script>
    <script>
        document.addEventListener('DOMContentLoaded', function () {
            var calendarEl = document.getElementById('calendar');
            var calendar = new FullCalendar.Calendar(calendarEl, {
                initialView: 'timeGridWeek',
                slotMinTime: '06:00:00',
                slotMaxTime: '23:00:00',
                height: 'auto',
                locale: 'pt',
                headerToolbar: {
                    left: 'prev,next today',
                    center: 'title',
                    right: 'dayGridMonth,timeGridWeek,timeGridDay'
                },
                events: function (fetchInfo, successCallback, failureCallback) {
                    Promise.all([
                        fetch('/PersonalClasses/GetAvailablePersonalClasses').then(response => response.json()),
                        fetch('/GroupClasses/GetAvailableGroupClasses').then(response => response.json())
                    ])
                        .then(([personalClasses, groupClasses]) => {
                            const events = [
                                ...personalClasses.map(pc => ({
                                    id: pc.id,
                                    title: `Personal: ${pc.title}`,
                                    gym: pc.gym,
                                    start: pc.start,
                                    end: pc.end,
                                    instructor: pc.instructor,
                                    classtype: 'Personal', // Set explicitly
                                    instructorscore: pc.instructorscore,
                                    classNames: ['personal-class']
                                })),
                                ...groupClasses.map(gc => ({
                                    id: gc.id,
                                    title: `Group: ${gc.title}`,
                                    gym: gc.gym,
                                    start: gc.start,
                                    end: gc.end,
                                    instructor: gc.instructor,
                                    classtype: 'Group', // Set explicitly
                                    instructorscore: gc.instructorscore,
                                    classNames: ['group-class']
                                }))
                            ];
                            successCallback(events);
                        })
                        .catch(error => {
                            console.error('Error fetching classes:', error);
                            failureCallback(error);
                        });
                },
                eventClick: function (info) {
                    const start = new Date(info.event.start).toLocaleString();
                    const end = new Date(info.event.end).toLocaleString();

                    if (info.event.extendedProps.classtype === 'Personal') {
                        document.getElementById('personalClassType').textContent = info.event.title.replace('Personal: ', '');
                        document.getElementById('personalGym').textContent = info.event.extendedProps.gym || "Not specified";
                        document.getElementById('personalInstructor').textContent = info.event.extendedProps.instructor;
                        document.getElementById('personalStartTime').textContent = start;
                        document.getElementById('personalEndTime').textContent = end;

                        renderStars('personalInstructorScoreStars', 'personalInstructorScoreText', info.event.extendedProps.instructorscore);

                        $('#personalClassModal').modal('show');

                        // Configura o botão de inscrição
                        const enrollButton = document.getElementById('personalEnrollButton');
                        if (enrollButton) {
                            enrollButton.dataset.eventId = info.event.id;
                            enrollButton.onclick = function () {
                                enrollInClass('/PersonalClasses/SignUp', info.event.id);
                            };
                        }

                    } else if (info.event.extendedProps.classtype === 'Group') {
                        document.getElementById('groupClassType').textContent = info.event.title.replace('Group: ', '');
                        document.getElementById('groupGym').textContent = info.event.extendedProps.gym || "Not specified";
                        document.getElementById('groupInstructor').textContent = info.event.extendedProps.instructor;
                        document.getElementById('groupStartTime').textContent = start;
                        document.getElementById('groupEndTime').textContent = end;
                        console.log('Extended Props:', info.event.extendedProps);
                        console.log('Gym:', info.event.extendedProps.gym);

                        renderStars('groupInstructorScoreStars', 'groupInstructorScoreText', info.event.extendedProps.instructorscore);

                        $('#groupClassModal').modal('show');

                        // Configura o botão de inscrição
                        const enrollButton = document.getElementById('groupEnrollButton');
                        if (enrollButton) {
                            enrollButton.dataset.eventId = info.event.id;
                            enrollButton.onclick = function () {
                                enrollInClass('/GroupClasses/SignUp', info.event.id);
                            };
                        }
                    }
                }
            });

            calendar.render();

            // Função para renderizar as estrelas
            function renderStars(starsContainerId, scoreTextId, score) {
                const fullStars = Math.floor(score);
                const halfStar = score % 1 !== 0;
                const starsContainer = document.getElementById(starsContainerId);
                const scoreText = document.getElementById(scoreTextId);

                // Limpar estrelas anteriores
                starsContainer.innerHTML = '';
                scoreText.textContent = ` (${score.toFixed(1)})`;

                // Adicionar estrelas inteiras
                for (let i = 0; i < fullStars; i++) {
                    const starIcon = document.createElement('i');
                    starIcon.classList.add('fas', 'fa-star', 'text-warning');
                    starsContainer.appendChild(starIcon);
                }

                // Adicionar meia estrela, se aplicável
                if (halfStar) {
                    const halfStarIcon = document.createElement('i');
                    halfStarIcon.classList.add('fas', 'fa-star-half-alt', 'text-warning');
                    starsContainer.appendChild(halfStarIcon);
                }
            }

            function enrollInClass(url, classId) {
                fetch(`${url}/${classId}`, {
                    method: 'GET',
                    headers: {
                        'Content-Type': 'application/json',
                        'Accept': 'application/json',
                    }
                })
                    .then(response => {
                        if (!response.ok) {
                            throw new Error(`HTTP error! status: ${response.status}`);
                        }
                        return response.json();
                    })
                    .then(data => {
                        if (data.success) {
                            // Mostra a flash message
                            showFlashMessage('success', data.message);

                            // Fecha o modal
                            $('#personalClassModal').modal('hide');
                            $('#groupClassModal').modal('hide');

                            // Atualiza o calendário
                            calendar.refetchEvents();
                        } else {
                            // Mostra uma mensagem de erro
                            showFlashMessage('danger', data.message);
                        }
                    })
                    .catch(error => {
                        console.error('Error enrolling in class:', error);
                        showFlashMessage('danger', 'An unexpected error occurred while trying to enroll in the class.');
                    });
            }

            // Função para exibir a flash message
            function showFlashMessage(type, message) {
                const flashMessageContainer = document.getElementById('flashMessageContainer');

                // Define a classe com base no tipo (success, danger, etc.)
                flashMessageContainer.className = `alert alert-${type}`;
                flashMessageContainer.textContent = message;

                // Exibe a mensagem
                flashMessageContainer.classList.remove('d-none');

                // Remove a mensagem após 5 segundos
                setTimeout(() => {
                    flashMessageContainer.classList.add('d-none');
                }, 5000);
            }


        });
    </script>
}
